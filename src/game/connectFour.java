/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package game;

/**
 *
 * @author Carey
 */

import java.awt.Color;
import java.util.Random;
import javax.swing.JFrame;

public class connectFour extends javax.swing.JFrame {

    /**
     * Creates new form connectFour
     */
    public connectFour(connector b) {
        board = b;
        initComponents();
        setResizable(false);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")                    
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        jButton20 = new javax.swing.JButton();
        jButton21 = new javax.swing.JButton();
        jButton22 = new javax.swing.JButton();
        jButton23 = new javax.swing.JButton();
        jButton24 = new javax.swing.JButton();
        jButton25 = new javax.swing.JButton();
        jButton26 = new javax.swing.JButton();
        jButton27 = new javax.swing.JButton();
        jButton28 = new javax.swing.JButton();
        jButton29 = new javax.swing.JButton();
        jButton30 = new javax.swing.JButton();
        jButton31 = new javax.swing.JButton();
        jButton32 = new javax.swing.JButton();
        jButton33 = new javax.swing.JButton();
        jButton34 = new javax.swing.JButton();
        jButton35 = new javax.swing.JButton();
        jButton36 = new javax.swing.JButton();
        jButton37 = new javax.swing.JButton();
        jButton38 = new javax.swing.JButton();
        jButton39 = new javax.swing.JButton();
        jButton40 = new javax.swing.JButton();
        jButton41 = new javax.swing.JButton();
        jButton42 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 204, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });
        
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });
        
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });
        
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });
        
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });
        
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });
        
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });
        
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });
        
        jButton22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton22ActionPerformed(evt);
            }
        });
        
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });
        
        jButton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton24ActionPerformed(evt);
            }
        });
        
        jButton25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton25ActionPerformed(evt);
            }
        });
        
        jButton26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton26ActionPerformed(evt);
            }
        });
        
        jButton27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton27ActionPerformed(evt);
            }
        });
        
        jButton28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton28ActionPerformed(evt);
            }
        });
        
        jButton29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton29ActionPerformed(evt);
            }
        });
        
        jButton30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton30ActionPerformed(evt);
            }
        });
        
        jButton31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton31ActionPerformed(evt);
            }
        });
        
        jButton32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton32ActionPerformed(evt);
            }
        });
        
        jButton33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton33ActionPerformed(evt);
            }
        });
        
        jButton34.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton34ActionPerformed(evt);
            }
        });
        
        jButton35.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton35ActionPerformed(evt);
            }
        });
        
        jButton36.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton36ActionPerformed(evt);
            }
        });
        
        jButton37.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton37ActionPerformed(evt);
            }
        });
        
        jButton38.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton38ActionPerformed(evt);
            }
        });
        
        jButton39.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton39ActionPerformed(evt);
            }
        });
        
        jButton40.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton40ActionPerformed(evt);
            }
        });
        
        jButton41.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton41ActionPerformed(evt);
            }
        });
        
        jButton42.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton42ActionPerformed(evt);
            }
        });

       

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton36, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton37, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jButton29, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton30, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jButton22, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton23, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton38, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton39, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton40, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton25, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton26, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton32, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton34, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton41, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton35, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton42, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton19, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton20, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton27, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton26, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton25, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton24, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton22, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton23, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton28, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton35, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton34, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton32, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton29, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton30, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton31, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton33, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton36, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton37, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton38, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton39, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton40, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton41, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton42, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE))
                .addGap(0, 14, Short.MAX_VALUE))
        );

        int buttonOneColor = board.fill(0,0);
        if (buttonOneColor == 1) {
            jButton1.setBackground(Color.red);
        } else if (buttonOneColor == -1) {
            jButton1.setBackground(Color.yellow);
        }
        int buttonTwoColor = board.fill(1,0);
        if (buttonTwoColor == 1) {
            jButton2.setBackground(Color.red);
        } else if (buttonTwoColor == -1) {
            jButton2.setBackground(Color.yellow);
        }
        int buttonThreeColor = board.fill(2,0);
        if (buttonThreeColor == 1) {
            jButton3.setBackground(Color.red);
        } else if (buttonThreeColor == -1) {
            jButton3.setBackground(Color.yellow);
        }
        int buttonFourColor = board.fill(3,0);
        if (buttonFourColor == 1) {
            jButton4.setBackground(Color.red);
        } else if (buttonFourColor == -1) {
            jButton4.setBackground(Color.yellow);
        }
        int buttonFiveColor = board.fill(4,0);
        if (buttonFiveColor == 1) {
            jButton5.setBackground(Color.red);
        } else if (buttonFiveColor == -1) {
            jButton5.setBackground(Color.yellow);
        }
        int buttonSixColor = board.fill(5,0);
        if (buttonSixColor == 1) {
            jButton6.setBackground(Color.red);
        } else if (buttonSixColor == -1) {
            jButton6.setBackground(Color.yellow);
        }
        int buttonSevenColor = board.fill(6,0);
        if (buttonSevenColor == 1) {
            jButton7.setBackground(Color.red);
        } else if (buttonSevenColor == -1) {
            jButton7.setBackground(Color.yellow);
        }
        
        
        
        
        pack();
    }// </editor-fold>                        

                                       
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropZero(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        done = true;
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        done = true;
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        done = true;
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        done = true;
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        done = true;
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        done = true;
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        done = true;
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        done = true;
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        done = true;
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        done = true;
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        done = true;
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        done = true;
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        done = true;
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        done = true;
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        done = true;
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        done = true;
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        done = true;
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        done = true;
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        done = true;
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose();
                        done = true;
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        done = true;
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropOne(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropTwo(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropThree(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropFour(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropFive(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropSix(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropZero(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropOne(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropTwo(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropThree(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropFour(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropFive(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropSix(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropZero(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropOne(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropTwo(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropThree(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropFour(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropFive(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropSix(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton22ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropZero(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropOne(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton24ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropTwo(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton25ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropThree(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton26ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropFour(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton27ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropFive(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton28ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropSix(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }    
    private void jButton29ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropZero(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton30ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropOne(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton31ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropTwo(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton32ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropThree(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton33ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropFour(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton34ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropFive(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton35ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropSix(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton36ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropZero(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton37ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropOne(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton38ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropTwo(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton39ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropThree(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton40ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropFour(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton41ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropFive(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }
    private void jButton42ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        int boardResult = board.dropSix(true);
        if (boardResult == 1) {
            connectWin w = new connectWin();
            setVisible(false);
        } else if (boardResult == 2) {
            connectLose l = new connectLose();
            setVisible(false);
        } else if (boardResult == 0) {
            boolean done = false;
            while (!done) {
                Random rand = new Random();
                int r = rand.nextInt(7);
                if (r == 0) {
                    int theirBoardResult = board.dropZero(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 1) {
                    int theirBoardResult = board.dropOne(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 2) {
                    int theirBoardResult = board.dropTwo(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 3) {
                    int theirBoardResult = board.dropThree(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 4) {
                    int theirBoardResult = board.dropFour(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 5) {
                    int theirBoardResult = board.dropFive(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                } else if (r == 6) {
                    int theirBoardResult = board.dropSix(false); 
                    if (boardResult == 1) {
                        connectWin w = new connectWin();
                        setVisible(false);
                    } else if (boardResult == 2) {
                        connectLose l = new connectLose(); 
                        setVisible(false); 
                    } else if (boardResult == 0) { 
                        connectFour f = new connectFour(board);
                        setVisible(false);
                    }
                }
            }
        } else if (boardResult == -1) {
        }
    }    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(connectFour.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(connectFour.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(connectFour.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(connectFour.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new connectFour(board).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify      
    private static connector board;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton26;
    private javax.swing.JButton jButton27;
    private javax.swing.JButton jButton28;
    private javax.swing.JButton jButton29;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton30;
    private javax.swing.JButton jButton31;
    private javax.swing.JButton jButton32;
    private javax.swing.JButton jButton33;
    private javax.swing.JButton jButton34;
    private javax.swing.JButton jButton35;
    private javax.swing.JButton jButton36;
    private javax.swing.JButton jButton37;
    private javax.swing.JButton jButton38;
    private javax.swing.JButton jButton39;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton40;
    private javax.swing.JButton jButton41;
    private javax.swing.JButton jButton42;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;               
}